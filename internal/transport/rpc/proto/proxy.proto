syntax = "proto3";

package proxy;

option go_package = "github.com/SuzukiHonoka/spaceship/v2/internal/transport/rpc/proto;proxy";

service Proxy{
  rpc DnsResolve(DnsRequest) returns (DnsResponse) {};
  rpc Proxy(stream ProxySRC) returns (stream ProxyDST) {};
}

message ProxySRC{
  oneof header_or_payload{
    ProxyHeader header = 1;
    bytes payload = 2;
  }

  message ProxyHeader{
    // user id
    string id = 1;
    // addr
    string addr = 2;
  }
}

enum ProxyStatus{
  Session = 0;
  Error = 1;
  Accepted = 2;
  EOF = 3;
}

message ProxyDST{
  ProxyStatus status = 1;

  oneof header_or_payload{
    ProxyHeader header = 2;
    bytes payload = 3;
  }

  message ProxyHeader{
    string addr = 2;
  }
}

message DnsRequestItem{
  string fqdn = 1;
  uint32 qType = 2;
}

// Complete DNS Resource Record
message RR_Record {
  // Wire format of the complete DNS RR (recommended approach)
  bytes wire_data = 1;
  // Metadata for easier processing (optional)
  string name = 2;
  uint32 rrtype = 3;
  uint32 class = 4;
  uint32 ttl = 5;
}

message DnsRequest{
  // user id
  string id = 1;
  // dns query items
  repeated DnsRequestItem items = 2;
}

message DnsResult {
  // fqdn
  string fqdn = 1;
  // resolved DNS records (updated to use complete RR format)
  repeated RR_Record records = 2;
}

message DnsResponse{
  // fqdn resolved result
  repeated DnsResult result = 1;
}